module CounterNet.Update where
import CounterNet.Static.Types
import CounterNet.Static.FromSuperPlace
import CounterNet.Static.Helpers.MainMenu as MainMenu
import CounterNet.Static.Helpers.CounterPlace as CounterPlace

import CounterNet.Static.Helpers.MainMenuPlayer as MainMenuPlayer
import CounterNet.Static.Helpers.CounterPlacePlayer as CounterPlacePlayer

import Static.List
import Utils.Utils
import Static.ServerTypes
import Static.Cmd (Cmd(..))
import qualified Static.Cmd as Cmd

-- function called when new client connects (do not delete)
clientConnect :: FromSuperPlace -> ClientID -> MainMenu -> (MainMenu, MainMenuPlayer)
clientConnect fsp clientID mainMenu =
    error "Please fill out clientConnect function for the CounterNet net."

-- functions called when a client disconnects (do not delete)
clientDisconnectFromCounterPlace :: FromSuperPlace -> ClientID -> CounterPlace -> CounterPlacePlayer -> CounterPlace
clientDisconnectFromCounterPlace fsp clientID counterPlace counterPlacePlayer =
    error "Please fill out the clientDisconnectFromCounterPlace function for the CounterNet net."

clientDisconnectFromMainMenu :: FromSuperPlace -> ClientID -> MainMenu -> MainMenuPlayer -> MainMenu
clientDisconnectFromMainMenu fsp clientID mainMenu mainMenuPlayer =
    error "Please fill out the clientDisconnectFromMainMenu function for the CounterNet net."


-- functions for each transition
updateGoToCounterPlace :: FromSuperPlace -> 
    ClientID ->
    GoToCounterPlace ->
    MainMenu -> 
    CounterPlace -> 
    List MainMenuPlayer -> 
    ( MainMenu,
      CounterPlace,
      (ClientID, MainMenuPlayer) -> GoToCounterPlacefromMainMenu
    )
updateGoToCounterPlace fsp clientId GoToCounterPlace mainMenu counterPlace lstMainMenu =
    let
        fromMainMenu :: (ClientID, MainMenuPlayer) -> GoToCounterPlacefromMainMenu
        fromMainMenu (pId, pmainMenu) = error "Please fill in function stub."


    in
        (mainMenu, counterPlace, fromMainMenu)

updateGoToMainMenu :: FromSuperPlace -> 
    ClientID ->
    GoToMainMenu ->
    CounterPlace -> 
    MainMenu -> 
    List CounterPlacePlayer -> 
    ( CounterPlace,
      MainMenu,
      (ClientID, CounterPlacePlayer) -> GoToMainMenufromCounterPlace
    )
updateGoToMainMenu fsp clientId GoToMainMenu counterPlace mainMenu lstCounterPlace =
    let
        fromCounterPlace :: (ClientID, CounterPlacePlayer) -> GoToMainMenufromCounterPlace
        fromCounterPlace (pId, pcounterPlace) = error "Please fill in function stub."


    in
        (counterPlace, mainMenu, fromCounterPlace)

updateIncrementCounter :: FromSuperPlace -> 
    ClientID ->
    IncrementCounter ->
    CounterPlace -> 
    List CounterPlacePlayer -> 
    ( CounterPlace,
      (ClientID, CounterPlacePlayer) -> IncrementCounterfromCounterPlace
    )
updateIncrementCounter fsp clientId IncrementCounter counterPlace lstCounterPlace =
    let
        fromCounterPlace :: (ClientID, CounterPlacePlayer) -> IncrementCounterfromCounterPlace
        fromCounterPlace (pId, pcounterPlace) = error "Please fill in function stub."


    in
        (counterPlace, fromCounterPlace)

updateDecrementCounter :: FromSuperPlace -> 
    ClientID ->
    DecrementCounter ->
    CounterPlace -> 
    List CounterPlacePlayer -> 
    ( CounterPlace,
      (ClientID, CounterPlacePlayer) -> DecrementCounterfromCounterPlace
    )
updateDecrementCounter fsp clientId DecrementCounter counterPlace lstCounterPlace =
    let
        fromCounterPlace :: (ClientID, CounterPlacePlayer) -> DecrementCounterfromCounterPlace
        fromCounterPlace (pId, pcounterPlace) = error "Please fill in function stub."


    in
        (counterPlace, fromCounterPlace)


